// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer } from './client';
import type { OfferGetLegalRolesData, OfferGetLegalRolesResponses, OfferGetAllOffersData, OfferGetAllOffersResponses, OfferGetAllOffersErrors, OfferCreateUserOfferData, OfferCreateUserOfferResponses, OfferCreateUserOfferErrors, OfferGetAllRawOffersData, OfferGetAllRawOffersResponses, OfferGetAllRawOffersErrors, OfferCreateRawOfferData, OfferCreateRawOfferResponses, OfferCreateRawOfferErrors, OfferImportRawOffersData, OfferImportRawOffersResponses, OfferImportRawOffersErrors, OfferGetReviewOfferData, OfferGetReviewOfferResponses, OfferGetReviewOfferErrors, OfferUpdateOfferData, OfferUpdateOfferResponses, OfferUpdateOfferErrors, OfferGetRawOfferData, OfferGetRawOfferResponses, OfferGetRawOfferErrors, OfferAcceptOfferData, OfferAcceptOfferResponses, OfferAcceptOfferErrors, OfferRejectOfferData, OfferRejectOfferResponses, OfferRejectOfferErrors, OfferParseRawData, OfferParseRawResponses, OfferParseRawErrors, PlaceCreatePlaceData, PlaceCreatePlaceResponses, PlaceCreatePlaceErrors, PlaceCreateCityData, PlaceCreateCityResponses, PlaceCreateCityErrors, PlaceGetFacilitiesData, PlaceGetFacilitiesResponses, PlaceGetFacilitiesErrors, PlaceGetFacilityData, PlaceGetFacilityResponses, PlaceGetFacilityErrors, PlaceGetCityData, PlaceGetCityResponses, PlaceGetCityErrors, PlaceGetCitiesData, PlaceGetCitiesResponses, PlaceGetCitiesErrors, DefaultReadRootData, DefaultReadRootResponses, HealthcheckHealthCheckData, HealthcheckHealthCheckResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Legal Roles
 */
export const offerGetLegalRoles = <ThrowOnError extends boolean = false>(options?: Options<OfferGetLegalRolesData, ThrowOnError>) => {
    return (options?.client ?? client).get<OfferGetLegalRolesResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/legal_roles',
        ...options
    });
};

/**
 * Get All Offers
 */
export const offerGetAllOffers = <ThrowOnError extends boolean = false>(options?: Options<OfferGetAllOffersData, ThrowOnError>) => {
    return (options?.client ?? client).get<OfferGetAllOffersResponses, OfferGetAllOffersErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers',
        ...options
    });
};

/**
 * Create User Offer
 */
export const offerCreateUserOffer = <ThrowOnError extends boolean = false>(options: Options<OfferCreateUserOfferData, ThrowOnError>) => {
    return (options.client ?? client).post<OfferCreateUserOfferResponses, OfferCreateUserOfferErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get All Raw Offers
 */
export const offerGetAllRawOffers = <ThrowOnError extends boolean = false>(options?: Options<OfferGetAllRawOffersData, ThrowOnError>) => {
    return (options?.client ?? client).get<OfferGetAllRawOffersResponses, OfferGetAllRawOffersErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/raw',
        ...options
    });
};

/**
 * Create Raw Offer
 */
export const offerCreateRawOffer = <ThrowOnError extends boolean = false>(options: Options<OfferCreateRawOfferData, ThrowOnError>) => {
    return (options.client ?? client).post<OfferCreateRawOfferResponses, OfferCreateRawOfferErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/raw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Import Raw Offers
 */
export const offerImportRawOffers = <ThrowOnError extends boolean = false>(options: Options<OfferImportRawOffersData, ThrowOnError>) => {
    return (options.client ?? client).post<OfferImportRawOffersResponses, OfferImportRawOffersErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/import',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get Review Offer
 */
export const offerGetReviewOffer = <ThrowOnError extends boolean = false>(options: Options<OfferGetReviewOfferData, ThrowOnError>) => {
    return (options.client ?? client).get<OfferGetReviewOfferResponses, OfferGetReviewOfferErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/{offer_uuid}',
        ...options
    });
};

/**
 * Update Offer
 */
export const offerUpdateOffer = <ThrowOnError extends boolean = false>(options: Options<OfferUpdateOfferData, ThrowOnError>) => {
    return (options.client ?? client).patch<OfferUpdateOfferResponses, OfferUpdateOfferErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/{offer_uuid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Raw Offer
 */
export const offerGetRawOffer = <ThrowOnError extends boolean = false>(options: Options<OfferGetRawOfferData, ThrowOnError>) => {
    return (options.client ?? client).get<OfferGetRawOfferResponses, OfferGetRawOfferErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/raw/{offer_uuid}',
        ...options
    });
};

/**
 * Accept Offer
 */
export const offerAcceptOffer = <ThrowOnError extends boolean = false>(options: Options<OfferAcceptOfferData, ThrowOnError>) => {
    return (options.client ?? client).patch<OfferAcceptOfferResponses, OfferAcceptOfferErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/accept/{offer_uuid}',
        ...options
    });
};

/**
 * Reject Offer
 */
export const offerRejectOffer = <ThrowOnError extends boolean = false>(options: Options<OfferRejectOfferData, ThrowOnError>) => {
    return (options.client ?? client).patch<OfferRejectOfferResponses, OfferRejectOfferErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/reject/{offer_uuid}',
        ...options
    });
};

/**
 * Parse Raw
 */
export const offerParseRaw = <ThrowOnError extends boolean = false>(options: Options<OfferParseRawData, ThrowOnError>) => {
    return (options.client ?? client).get<OfferParseRawResponses, OfferParseRawErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/parse/{offer_uuid}',
        ...options
    });
};

/**
 * Create Place
 */
export const placeCreatePlace = <ThrowOnError extends boolean = false>(options: Options<PlaceCreatePlaceData, ThrowOnError>) => {
    return (options.client ?? client).post<PlaceCreatePlaceResponses, PlaceCreatePlaceErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create City
 */
export const placeCreateCity = <ThrowOnError extends boolean = false>(options: Options<PlaceCreateCityData, ThrowOnError>) => {
    return (options.client ?? client).post<PlaceCreateCityResponses, PlaceCreateCityErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/city',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Facilities
 */
export const placeGetFacilities = <ThrowOnError extends boolean = false>(options: Options<PlaceGetFacilitiesData, ThrowOnError>) => {
    return (options.client ?? client).get<PlaceGetFacilitiesResponses, PlaceGetFacilitiesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/facility/{place_name}',
        ...options
    });
};

/**
 * Get Facility
 */
export const placeGetFacility = <ThrowOnError extends boolean = false>(options: Options<PlaceGetFacilityData, ThrowOnError>) => {
    return (options.client ?? client).get<PlaceGetFacilityResponses, PlaceGetFacilityErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/facility/uuid/{place_uuid}',
        ...options
    });
};

/**
 * Get City
 */
export const placeGetCity = <ThrowOnError extends boolean = false>(options: Options<PlaceGetCityData, ThrowOnError>) => {
    return (options.client ?? client).get<PlaceGetCityResponses, PlaceGetCityErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/city/uuid/{city_uuid}',
        ...options
    });
};

/**
 * Get Cities
 */
export const placeGetCities = <ThrowOnError extends boolean = false>(options: Options<PlaceGetCitiesData, ThrowOnError>) => {
    return (options.client ?? client).get<PlaceGetCitiesResponses, PlaceGetCitiesErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/city/{city_name}',
        ...options
    });
};

/**
 * Read Root
 */
export const defaultReadRoot = <ThrowOnError extends boolean = false>(options?: Options<DefaultReadRootData, ThrowOnError>) => {
    return (options?.client ?? client).get<DefaultReadRootResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Perform a Health Check
 */
export const healthcheckHealthCheck = <ThrowOnError extends boolean = false>(options?: Options<HealthcheckHealthCheckData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthcheckHealthCheckResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};
