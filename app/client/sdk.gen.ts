// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { ReadRawOffersRawGetData, ReadRawOffersRawGetResponses, ReadRawOffersRawGetErrors, CreateRawOffersRawPostData, CreateRawOffersRawPostResponses, CreateRawOffersRawPostErrors, ParseRawOffersParseOfferUuidGetData, ParseRawOffersParseOfferUuidGetResponses, ParseRawOffersParseOfferUuidGetErrors, UpdateOffersParseOfferUuidPatchData, UpdateOffersParseOfferUuidPatchResponses, UpdateOffersParseOfferUuidPatchErrors, ReadOffersGetData, ReadOffersGetResponses, ReadOffersGetErrors, ItemGetOnePlacesPlaceUuidGetData, ItemGetOnePlacesPlaceUuidGetResponses, ItemGetOnePlacesPlaceUuidGetErrors, ReadRootGetData, ReadRootGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Read Raw
 */
export const readRawOffersRawGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRawOffersRawGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRawOffersRawGetResponses, ReadRawOffersRawGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/offers/raw',
        ...options
    });
};

/**
 * Create Raw
 */
export const createRawOffersRawPost = <ThrowOnError extends boolean = false>(options: Options<CreateRawOffersRawPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRawOffersRawPostResponses, CreateRawOffersRawPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/offers/raw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Parse Raw
 */
export const parseRawOffersParseOfferUuidGet = <ThrowOnError extends boolean = false>(options: Options<ParseRawOffersParseOfferUuidGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ParseRawOffersParseOfferUuidGetResponses, ParseRawOffersParseOfferUuidGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/offers/parse/{offer_uuid}',
        ...options
    });
};

/**
 * Update
 */
export const updateOffersParseOfferUuidPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateOffersParseOfferUuidPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateOffersParseOfferUuidPatchResponses, UpdateOffersParseOfferUuidPatchErrors, ThrowOnError>({
        url: '/offers/parse/{offer_uuid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read
 */
export const readOffersGet = <ThrowOnError extends boolean = false>(options?: Options<ReadOffersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadOffersGetResponses, ReadOffersGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/offers/',
        ...options
    });
};

/**
 * Item Get One
 */
export const itemGetOnePlacesPlaceUuidGet = <ThrowOnError extends boolean = false>(options: Options<ItemGetOnePlacesPlaceUuidGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ItemGetOnePlacesPlaceUuidGetResponses, ItemGetOnePlacesPlaceUuidGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/places/{place_uuid}',
        ...options
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadRootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Perform a Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};