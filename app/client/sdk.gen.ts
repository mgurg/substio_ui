// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type Client, type TDataShape, formDataBodySerializer } from './client';
import type { GetLegalRolesOffersLegalRolesGetData, GetLegalRolesOffersLegalRolesGetResponses, GetAllOffersOffersGetData, GetAllOffersOffersGetResponses, GetAllOffersOffersGetErrors, CreateUserOfferOffersPostData, CreateUserOfferOffersPostResponses, CreateUserOfferOffersPostErrors, GetAllRawOffersOffersRawGetData, GetAllRawOffersOffersRawGetResponses, GetAllRawOffersOffersRawGetErrors, CreateRawOfferOffersRawPostData, CreateRawOfferOffersRawPostResponses, CreateRawOfferOffersRawPostErrors, ImportRawOffersOffersImportPostData, ImportRawOffersOffersImportPostResponses, ImportRawOffersOffersImportPostErrors, GetReviewOfferOffersOfferUuidGetData, GetReviewOfferOffersOfferUuidGetResponses, GetReviewOfferOffersOfferUuidGetErrors, UpdateOfferOffersOfferUuidPatchData, UpdateOfferOffersOfferUuidPatchResponses, UpdateOfferOffersOfferUuidPatchErrors, GetRawOfferOffersRawOfferUuidGetData, GetRawOfferOffersRawOfferUuidGetResponses, GetRawOfferOffersRawOfferUuidGetErrors, AcceptOfferOffersAcceptOfferUuidPatchData, AcceptOfferOffersAcceptOfferUuidPatchResponses, AcceptOfferOffersAcceptOfferUuidPatchErrors, RejectOfferOffersRejectOfferUuidPatchData, RejectOfferOffersRejectOfferUuidPatchResponses, RejectOfferOffersRejectOfferUuidPatchErrors, ParseRawOffersParseOfferUuidGetData, ParseRawOffersParseOfferUuidGetResponses, ParseRawOffersParseOfferUuidGetErrors, CreatePlacePlacesPostData, CreatePlacePlacesPostResponses, CreatePlacePlacesPostErrors, CreateCityPlacesCityPostData, CreateCityPlacesCityPostResponses, CreateCityPlacesCityPostErrors, GetFacilitiesPlacesFacilityPlaceNameGetData, GetFacilitiesPlacesFacilityPlaceNameGetResponses, GetFacilitiesPlacesFacilityPlaceNameGetErrors, GetFacilityPlacesFacilityUuidPlaceUuidGetData, GetFacilityPlacesFacilityUuidPlaceUuidGetResponses, GetFacilityPlacesFacilityUuidPlaceUuidGetErrors, GetCityPlacesCityUuidCityUuidGetData, GetCityPlacesCityUuidCityUuidGetResponses, GetCityPlacesCityUuidCityUuidGetErrors, GetCitiesPlacesCityCityNameGetData, GetCitiesPlacesCityCityNameGetResponses, GetCitiesPlacesCityCityNameGetErrors, ReadRootGetData, ReadRootGetResponses, HealthCheckHealthGetData, HealthCheckHealthGetResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get Legal Roles
 */
export const getLegalRolesOffersLegalRolesGet = <ThrowOnError extends boolean = false>(options?: Options<GetLegalRolesOffersLegalRolesGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLegalRolesOffersLegalRolesGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/legal_roles',
        ...options
    });
};

/**
 * Get All Offers
 */
export const getAllOffersOffersGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllOffersOffersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllOffersOffersGetResponses, GetAllOffersOffersGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers',
        ...options
    });
};

/**
 * Create User Offer
 */
export const createUserOfferOffersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserOfferOffersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserOfferOffersPostResponses, CreateUserOfferOffersPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get All Raw Offers
 */
export const getAllRawOffersOffersRawGet = <ThrowOnError extends boolean = false>(options?: Options<GetAllRawOffersOffersRawGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAllRawOffersOffersRawGetResponses, GetAllRawOffersOffersRawGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/raw',
        ...options
    });
};

/**
 * Create Raw Offer
 */
export const createRawOfferOffersRawPost = <ThrowOnError extends boolean = false>(options: Options<CreateRawOfferOffersRawPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateRawOfferOffersRawPostResponses, CreateRawOfferOffersRawPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/raw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Import Raw Offers
 */
export const importRawOffersOffersImportPost = <ThrowOnError extends boolean = false>(options: Options<ImportRawOffersOffersImportPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ImportRawOffersOffersImportPostResponses, ImportRawOffersOffersImportPostErrors, ThrowOnError>({
        ...formDataBodySerializer,
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/import',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Get Review Offer
 */
export const getReviewOfferOffersOfferUuidGet = <ThrowOnError extends boolean = false>(options: Options<GetReviewOfferOffersOfferUuidGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetReviewOfferOffersOfferUuidGetResponses, GetReviewOfferOffersOfferUuidGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/{offer_uuid}',
        ...options
    });
};

/**
 * Update Offer
 */
export const updateOfferOffersOfferUuidPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateOfferOffersOfferUuidPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<UpdateOfferOffersOfferUuidPatchResponses, UpdateOfferOffersOfferUuidPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/{offer_uuid}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Raw Offer
 */
export const getRawOfferOffersRawOfferUuidGet = <ThrowOnError extends boolean = false>(options: Options<GetRawOfferOffersRawOfferUuidGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetRawOfferOffersRawOfferUuidGetResponses, GetRawOfferOffersRawOfferUuidGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/raw/{offer_uuid}',
        ...options
    });
};

/**
 * Accept Offer
 */
export const acceptOfferOffersAcceptOfferUuidPatch = <ThrowOnError extends boolean = false>(options: Options<AcceptOfferOffersAcceptOfferUuidPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<AcceptOfferOffersAcceptOfferUuidPatchResponses, AcceptOfferOffersAcceptOfferUuidPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/accept/{offer_uuid}',
        ...options
    });
};

/**
 * Reject Offer
 */
export const rejectOfferOffersRejectOfferUuidPatch = <ThrowOnError extends boolean = false>(options: Options<RejectOfferOffersRejectOfferUuidPatchData, ThrowOnError>) => {
    return (options.client ?? client).patch<RejectOfferOffersRejectOfferUuidPatchResponses, RejectOfferOffersRejectOfferUuidPatchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/reject/{offer_uuid}',
        ...options
    });
};

/**
 * Parse Raw
 */
export const parseRawOffersParseOfferUuidGet = <ThrowOnError extends boolean = false>(options: Options<ParseRawOffersParseOfferUuidGetData, ThrowOnError>) => {
    return (options.client ?? client).get<ParseRawOffersParseOfferUuidGetResponses, ParseRawOffersParseOfferUuidGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/offers/parse/{offer_uuid}',
        ...options
    });
};

/**
 * Create Place
 */
export const createPlacePlacesPost = <ThrowOnError extends boolean = false>(options: Options<CreatePlacePlacesPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreatePlacePlacesPostResponses, CreatePlacePlacesPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create City
 */
export const createCityPlacesCityPost = <ThrowOnError extends boolean = false>(options: Options<CreateCityPlacesCityPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateCityPlacesCityPostResponses, CreateCityPlacesCityPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/city',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Facilities
 */
export const getFacilitiesPlacesFacilityPlaceNameGet = <ThrowOnError extends boolean = false>(options: Options<GetFacilitiesPlacesFacilityPlaceNameGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFacilitiesPlacesFacilityPlaceNameGetResponses, GetFacilitiesPlacesFacilityPlaceNameGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/facility/{place_name}',
        ...options
    });
};

/**
 * Get Facility
 */
export const getFacilityPlacesFacilityUuidPlaceUuidGet = <ThrowOnError extends boolean = false>(options: Options<GetFacilityPlacesFacilityUuidPlaceUuidGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetFacilityPlacesFacilityUuidPlaceUuidGetResponses, GetFacilityPlacesFacilityUuidPlaceUuidGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/facility/uuid/{place_uuid}',
        ...options
    });
};

/**
 * Get City
 */
export const getCityPlacesCityUuidCityUuidGet = <ThrowOnError extends boolean = false>(options: Options<GetCityPlacesCityUuidCityUuidGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCityPlacesCityUuidCityUuidGetResponses, GetCityPlacesCityUuidCityUuidGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/city/uuid/{city_uuid}',
        ...options
    });
};

/**
 * Get Cities
 */
export const getCitiesPlacesCityCityNameGet = <ThrowOnError extends boolean = false>(options: Options<GetCitiesPlacesCityCityNameGetData, ThrowOnError>) => {
    return (options.client ?? client).get<GetCitiesPlacesCityCityNameGetResponses, GetCitiesPlacesCityCityNameGetErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/places/city/{city_name}',
        ...options
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadRootGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/',
        ...options
    });
};

/**
 * Perform a Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};
